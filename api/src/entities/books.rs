//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::ActiveValue::Set;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize, Serialize)]
#[sea_orm(table_name = "books")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: String,
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub perspective: String,
}

#[derive(Deserialize)]
pub struct InsertModel {
    pub name: String,
    pub description: Option<String>,
    pub perspective: String,
}


impl InsertModel {
    pub fn to_active_model(self) -> ActiveModel {
        ActiveModel {
            id: Set(Uuid::new_v4().to_string()),
            name: Set(self.name),
            description: Set(self.description),
            perspective: Set(self.perspective),
        }
    }
}
#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
