//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::ActiveValue::Set;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "moves")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: String,
    pub book_id: String,
    pub fen: String,
    pub is_me: bool,
    pub parent: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub mov: Json,
    pub notes: Option<String>
}

#[derive(Deserialize)]
pub struct InsertModel {
    pub book_id: String,
    pub fen: String,
    pub is_me: bool,
    pub parent: Option<String>,
    pub mov: Json,
}

impl InsertModel{
    pub fn to_active_model(self) -> ActiveModel {
        ActiveModel {
            id: Set(Uuid::new_v4().to_string()),
            book_id: Set(self.book_id),
            fen: Set(self.fen),
            is_me: Set(self.is_me),
            parent: Set(self.parent),
            mov: Set(self.mov),
            notes: Default::default(),
        }
    }
}


#[derive(Deserialize)]
pub struct UpdateModel {
    pub id: String,
    pub notes: String,
}


#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
